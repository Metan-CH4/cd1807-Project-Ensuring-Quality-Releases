name: $(Date:yyyyMMdd)$(Rev:.r)

trigger:
- main

pool: myAgent

variables:
  python.version: '3.9.17'
  azureServiceConnectionId: 'finalProject222'
  projectRoot: $(System.DefaultWorkingDirectory)
  environmentName: 'test-vm'

stages:

#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
# - stage: Build
#   jobs:
#   - job: BuildInfrastructure
#     steps:
#     # Install Terraform on the pipeline agent 
#     - task: TerraformInstaller@0
#       displayName: 'Terrafom installation'
#       inputs:
#         terraformVersion: '1.5.2'

#     # Run Terraform Init on the pipeline agent 
#     - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
#       displayName: 'Terrafom init'
#       inputs:
#         provider: 'azurerm'
#         command: 'init'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
#         backendServiceArm: '$(azureServiceConnectionId)'
#         backendAzureRmResourceGroupName: 'finalProjectSA'
#         backendAzureRmStorageAccountName: 'tfstate268179373'
#         backendAzureRmContainerName: 'tfstate'
#         backendAzureRmKey: 'test.terraform.tfstate'

#     - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
#       displayName: Terraform validate
#       inputs:
#         provider: 'azurerm'
#         command: 'validate'

    
#     # Run Terraform Apply
#     - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
#       displayName: Terraform apply
#       inputs:
#         provider: 'azurerm'
#         command: 'apply'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
#         environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

#--------------------------------------------#  
# ARCHIVE STAGE
#--------------------------------------------#    
- stage: Archive
  jobs:
  - job: ArchivePackage
    steps:
    #--------------------------------------------#    
    # FakeRestAPI - Archive
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
        replaceExistingArchive: true
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

    #--------------------------------------------#  
    # # JMeter (Performance) Test Suite - Archive
    # # ToDo: Complete the ArchiveFiles@2 task and publish step 
    # - task: ArchiveFiles@2
    #   displayName: 'Archive PerformanceTestSuite'
    #   inputs:
    #     rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
    #     includeRootFolder: false
    #     archiveType: 'zip'
    #     archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter.zip'
    #     replaceExistingArchive: true
    # # JMeter Test Suite - Publish    
    # - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter.zip
    #   displayName: 'Upload Package'
    #   artifact: drop-jmeter
    #--------------------------------------------#
    # # Selenium (UI) Test Suite - Archive the package  
    # # "ArchiveFiles@2" picks up the web package and archives it.
    # - task: ArchiveFiles@2
    #   displayName: 'Archive UI Tests'
    #   inputs:
    #     rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
    #     includeRootFolder: false
    #     archiveType: 'zip'
    #     archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium.zip'
    #     replaceExistingArchive: true
    # # Selenium Test Suite - Publish the package  
    # - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium.zip   # Same as the archiveFile artifact above. 
    #   displayName: 'Upload Package'
    #   artifact: drop-selenium

--------------------------------------------#  
DEPLOYMENT STAGE
--------------------------------------------#    
- stage: Deploy
  jobs:
  # Deploy FakeRestAPI Web App
  - deployment: FakeRestAPI
    environment: 'test-vm' 
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: '$(azureServiceConnectionId)' 
              appName: 'finalApplication-AppService'           
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip    
              deploymentMethod: auto
  - deployment: VMDeploy
    displayName: VMDeploy
    environment:
      name:  'test-vm'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                sudo apt-get upgrade -y
                sudo apt-get update -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                sudo apt-get install -y chromium-driver
                sudo -H pip3 install --upgrade pip
                pip install -U selenium
                echo "python version:"
                python3 --version 
                export PATH=$PATH:/usr/bin/chromedriver
                # agent log analytics
            env:  
              AZURE_LOG_ANALYTICS_ID: '3a0a070f-aa82-4fcc-96c8-a410be78ce6d' #$(AZURE_LOG_ANALYTICS_ID)
              AZURE_LOG_ANALYTICS_PRIMARY_KEY: 'Dbx1jnYItRFLOcLmwIWNp3VA1OLydSFUVULzztnZasqvmMtbfolLQhyesB0/cqpCK8H/ErdjRwfVgaDtE2agbA==' #$(AZURE_LOG_ANALYTICS_PRIMARY_KEY)
            displayName: Configure VM   

#--------------------------------------------#  
# TEST STAGE
#--------------------------------------------#    

# - stage: Test
#   jobs:
#     - job: JMeter
#       displayName: Performance testing
#       pool: myAgent
#       steps:
#         - bash: |
#             sudo apt-get install openjdk-17-jre-headless -y
#             java -version
#             wget https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.6.tgz
#             tar xzvf apache-jmeter-5.6.tgz
#             echo "jmeter version : " 
#             apache-jmeter-5.6/bin/jmeter --version   
#             mkdir -p log/jmeter
#             pwd
#           displayName: Install JMeter
#         - bash: |
#             apache-jmeter-5.6/bin/jmeter -n -t automatedtesting/jmeter/StressTest.jmx -l log/jmeter/stress-test-result.csv -e -f -o log/jmeter/stress-test-html-report -j log/jmeter/jmeter-stress-test.log
#             cat log/jmeter/jmeter-stress-test.log
#           displayName: Run Stress Test
#         - bash: |
#             apache-jmeter-5.6/bin/jmeter -n -t automatedtesting/jmeter/EnduranceTest.jmx -l log/jmeter/endurance-test-result.csv -e -f -o log/jmeter/endurance-test-html-report -j log/jmeter/jmeter-endurance-test.log
#             cat log/jmeter/jmeter-endurance-test.log
#           displayName: Endurance test
#         - task: ArchiveFiles@2
#           displayName: Publish Stress Test Results
#           inputs:
#             rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report'
#             includeRootFolder: false
#             archiveType: zip
#             archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report.zip'
#             verbose: true
#         - task: ArchiveFiles@2
#           displayName: Publish Endurance Test Results
#           inputs:
#             rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report'
#             includeRootFolder: false
#             archiveType: zip
#             archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report.zip'
#             verbose: true
#         - task: PublishPipelineArtifact@1
#           displayName: Publish JMeter logs
#           inputs:
#             targetPath: '$(System.DefaultWorkingDirectory)/log/jmeter'
#             artifact: drop-jmeter   
# #--------------------------------------------#    
#     - job: Postman
#       displayName:  API-integration tests
#       pool: myAgent
#       steps:
#         # Postman - Install Newman    
#         - task: CmdLine@2
#           displayName: 'Install npm'
#           inputs:
#             script: 'curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash - && sudo apt-get install -y nodejs'
#             workingDir: '$(System.DefaultWorkingDirectory)'
#         - task: CmdLine@2
#           displayName: Install Newman
#           inputs:
#             script: 'sudo npm install -g newman'
#             workingDirectory: $(System.DefaultWorkingDirectory)
#         - task: CmdLine@2
#           displayName: Verify Working Directory
#           inputs:
#             script: 'pwd'
#             workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
#         # Postman - Run Regression Test Suite
#         - task: CmdLine@2
#           displayName: Run Regression Tests
#           continueOnError: true
#           inputs:
#             script: 'newman run TestSuite.Regression.json -e RegressionEnv.postman_environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
#             workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

#         # Postman - Run Data Validation Test Suite    
#         - task: CmdLine@2
#           displayName: Run Data Validation Tests
#           continueOnError: true
#           inputs:
#             script: 'newman run TestSuite.Data-Validation.json -e DataValidationEnv.postman_environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
#             workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
#         # Postman - Publish Results 
#         - task: PublishTestResults@2
#           inputs:
#             testResultsFormat: 'JUnit'
#             testResultsFiles: '**/TEST-*.xml' # '**/TEST-*.xml'
#             searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
#             mergeTestResults: true
#             testRunTitle: 'Regression-DataValidation-Test'

  # #--------------------------------------------#  
  # Selenium | Functional UI Tests
    - job: Selenium
      displayName:  Functional UI Tests
      pool: myAgent
      steps:
      - deployment: test_on_vm
        displayName: UI testing
        environment:
         name: 'test-vm'
         resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
              steps:
                - task: Bash@3
                  inputs:
                   targetType: inline
                   script: |
                    #!/bin/bash
                    chromium-browser -version
                    chromedriver --version
                    cd $(Pipeline.Workspace)/drop-selenium
                    unzip -o $(Build.BuildId)-selenium.zip
                    sudo mkdir -p /var/log/selenium
                    sudo chmod 664 /var/log/selenium
                    python3 login.py > ui-logs.log
                    python3 login.py
                    sudo mv ui-logs.log /var/log/selenium
                    cd $(System.DefaultWorkingDirectory)
                    mkdir -p log/selenium
                    sudo cp /var/log/selenium/ui-logs.log log/selenium
                - task: PublishPipelineArtifact@1
                  displayName: Publish selenium logs
                  inputs:
                    targetPath: '$(System.DefaultWorkingDirectory)/log/selenium/ui-logs.log'
                    artifactName: 'drop-selenium-logs'
