name: $(Date:yyyyMMdd)$(Rev:.r)

trigger:
- main

pool: myAgent

variables:
  python.version: '3.9.17'
  azureServiceConnectionId: 'finalProject222'
  projectRoot: $(System.DefaultWorkingDirectory)
  environmentName: 'test-vm'

stages:
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.5.2'

    # Run Terraform Init on the pipeline agent 
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'finalProjectSA'
        backendAzureRmStorageAccountName: 'tfstate268179373'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    
    # Run Terraform Apply
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

- stage: Archive
  jobs:
  - job: ArchivePackage
    steps:
    #--------------------------------------------#    
    # FakeRestAPI - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

    #--------------------------------------------#  
    # # JMeter (Performance) Test Suite - Archive
    # # ToDo: Complete the ArchiveFiles@2 task and publish step 
    # - task: ArchiveFiles@2
    #   displayName: 'Archive PerformanceTestSuite'
    #   inputs:
    #     rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
    #     includeRootFolder: false
    #     archiveType: 'zip'
    #     archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
    # # JMeter Test Suite - Publish    
    # - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
    #   displayName: 'Upload Package'
    #   artifact: drop-perftests
    #--------------------------------------------#
    # # Selenium (UI) Test Suite - Archive the package  
    # # "ArchiveFiles@2" picks up the web package and archives it.
    # - task: ArchiveFiles@2
    #   displayName: 'Archive UI Tests'
    #   inputs:
    #     rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
    #     includeRootFolder: false
    #     archiveType: 'zip'
    #     archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # # Selenium Test Suite - Publish the package  
    # - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
    #   displayName: 'Upload Package'
    #   artifact: drop-uitests

#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
- stage: Deploy
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  - deployment: FakeRestAPI
    # pool: #myAgent
      # vmImage: 'Ubuntu-18.04'  
      # vmImage: 'windows-latest'
    environment: 'test-vm' #<environment name>   # ToDo
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: '$(azureServiceConnectionId)' #'48e3af3a-cc82-4280-bdda-b22f5690beda'     # ToDo
              appName: 'finalApplication-AppService'               # ToDo
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip       # ToDo: Use the published zip artifact. 
              deploymentMethod: auto

  #--------------------------------------------#    
  #         # Run JMeter test suite against the App Service
  #         - task: CmdLine@2
  #           inputs:
  #             script: |
  #               pwd
  #               wget "https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.6.tgz"
  #               tar -xf apache-jmeter-5.6.tgz
  #               unzip -o $(Build.BuildId)-perftests.zip
  #               ./apache-jmeter-5.6/bin/jmeter -n -t PerformanceTestSuite.jmx -j jmeter.log -f
  #               cat jmeter.log                                                                           # ToDo: Write your commands
  #             # workingDirectory: $(Pipeline.Workspace)/<artifact>            # ToDo: Use the artifact name from the task above
  #             workingDirectory: $(Pipeline.Workspace)/drop-perftests/            # ToDo: Use the artifact name from the task above

  # #--------------------------------------------#  
  # # Selenium | Functional UI Tests
  # # ToDo: 
  # - deployment: VMDeploy
  #   displayName: Selenium Tests
  #   # pool: myAgent
  #     # vmImage: 'Ubuntu-18.04'      
  #   environment: 'test-vm' #<environment name>   # ToDo
  #   # pool: myAgent
  #   # environment:
  #   #   name: 'test-vm'        #ToDo: Change/provide a name
  #   #   resourceType: VirtualMachine
  #     # tags: selenium
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - download: current
  #           artifact: drop-ui-tests     # ToDo: Change/provide a name
            
  #         - task: Bash@3
  #           inputs:
  #             targetType: 'inline'
  #             script: |           
  #               #! /bin/bash
                
  #               sudo apt-get upgrade -y
  #               sudo apt-get install python3-pip -y
  #               sudo apt-get install unzip -y
  #               sudo apt-get install -y chromium-browser
  #               pip3 install selenium
  #               cd ~/
  #               DIR=/home/devopsagent/app
  #               if [ ! -d "$DIR" ]; then
  #                   mkdir app
  #               fi
  #               mv /home/devopsagent/myagent/_work/1/drop-uitests/$(Build.BuildId)-uitests.zip app
  #               cd app
  #               unzip -o $(Build.BuildId)-uitests.zip
  #               FILE=/home/devopsagent/app/chromedriver_linux64.zip
  #               if [ ! -f "$FILE" ]; then
  #                   LATEST=$(wget -q -O - http://chromedriver.storage.googleapis.com/LATEST_RELEASE)
  #                   wget http://chromedriver.storage.googleapis.com/$LATEST/chromedriver_linux64.zip
  #                   unzip -o chromedriver_linux64.zip
  #                   sudo ln -s $PWD/chromedriver /usr/local/bin/chromedriver
  #               fi
  #               export PATH=$PATH:/home/devopsagent/app
  #               echo "Starting Selenium Tests"
  #               python3 add_remove_from_cart.py >> selenium.log
  #               echo "Completed Selenium Tests. Check selenium.log for results."
    # # Postman Regression Test Suite    
    # # ToDo: Verify the working directory
    # - task: CmdLine@2
    #   displayName: Verify Working Directory
    #   inputs:
    #     script: 'pwd'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
#--------------------------------------------#    
    # # Postman - Install Newman    
    # - task: CmdLine@2
    #   displayName: 'Install npm'
    #   inputs:
    #     script: 'curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash - && sudo apt-get install -y nodejs'
    #     workingDir: '$(System.DefaultWorkingDirectory)'
    # - task: CmdLine@2
    #   displayName: Install Newman
    #   inputs:
    #     script: 'sudo npm install -g newman'
    #     workingDirectory: $(System.DefaultWorkingDirectory)
    # - task: CmdLine@2
    #   displayName: Run Regression Tests
    #   continueOnError: true
    #   inputs:
    #     script: 'newman run TestSuite.Regression.json -e RegressionEnv.postman_environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
    #     # script: 'newman run TestSuite.Regression.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # # Postman Data Validation Test Suite    
    # # ToDo: Verify the working directory
    # - task: CmdLine@2
    #   displayName: Verify Working Directory
    #   inputs:
    #     script: 'pwd'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # - task: CmdLine@2
    #   displayName: Run Data Validation Tests
    #   continueOnError: true
    #   inputs:
    #     script: 'newman run TestSuite.Data-Validation.json -e DataValidationEnv.postman_environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # # Postman - Publish Results 
    # # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
    # - task: PublishTestResults@2
    #   inputs:
    #     testResultsFormat: 'JUnit'
    #     testResultsFiles: '**/TEST-*.xml' # '**/TEST-*.xml'
    #     searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'      # ToDo
    #     mergeTestResults: true
    #     testRunTitle: 'Regression-DataValidation-Test'      # ToDo
